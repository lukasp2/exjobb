* howto
** How to create, add, run and use a FOM
1. start VisualOMT and devleop the FOM, save the module.

2.   Open Pitch Dev Studio.
2.1: Add the .xml file under interaction/object classes
2.2: click "Java Code Generate" and load it into a directory "MyFederate"

3:   Open idea (IntelliJ)
3.1: load the directory HLA_code.
3.2: go to File->Project Structure->Modules
3.3: click the '+' to the far right and select JARs or dirs and add the following:
- /home/lukas/Desktop/exjobb/[module name]/lib/rti_driver.jar
- /opt/Pitch/prti1516e/lib/prti1516e.jar
- /opt/JDKit/jdk.13.0.2 (may already be there)

3.4 kryssa ned ruta, i den inbyggda filutforskaren högerklicka src->New->Java Class
3.5 write code, right click the PathFinder().simulate() call in the main method to run.

4. Open pitchrti1516e.

(5. how to use pitch recorder)
* todo
** report
*** prio 1
*** TODO beskriv hur FOM in och ut skapades, hur den ser ut
*** TODO minipage format
*** prio 2
*** TODO gör en ordlista
Nätverk: sammankopplade radioapparater
Nod: en radioapparat i nätverket
Båge: en förbindelse över vilken två radioapparater kan kommunicera med varandra

HLA: High Level Architecture, en standard för distribuerade simuleringar.
RTI: Run Time Infrastructure
Federat: en aktör kopplad till RTI:n
Federation: en samling av federater som är kopplade till samma RTI
Multihop-simulator
Kommunikationstyp:

*** TODO distinguera mellan multihop-simulator och federationens simulering.
gäller främst inledning
*** TODO ta upp 4 hopp ger ännu mindre skillnad mellan heuristikerna
i resultatdelen kan detta tas upp.

*** TODO notepad
- metod ska vara en manual för hur man utför arbetet igen.
- beskriv hur arkitekturen byggdes upp i tur och ordning
- beskriv FOMen
- crash coursen ska vara konkret

** implementation
*** prio 1
*** prio 2
*** TODO Gör Radio till en extends Node
*** TODO Flytta ur Node ur Graph
*** TODO uppdatera bara nw max var 5:e sek
*** TODO flytta ur Astar ur Graph
*** TODO uppdatera FOMarna, så att multihop inte har en send request
** other
*** TODO bitBucket 
* notes / ideas
Om vi har två grafer G1 = (V, E1) och G2 = (V, E2) och E2 tillhör E1, så behöver vi inte räkna ut om det finns en väg genom G2 mellan två noder n1 och n2 om vi vet att den finns i G1. Det kan fortfarande finnas anledning att ta reda på om det finns en kortare väg genom G2 mellan nod n1 och n2. 

byt grafsökningsalgoritm beroende på grafens struktur

* pass
yPitch%123
lukas123

** Mattermost
username: lukas.pohlman
password: yPitch%123

