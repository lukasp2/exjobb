* PRESENTATION
16 slides
25min ungefär

- Ha med forskningsfrågan
Framsida:
- handläggare och examinator
Bakgrund
- kort om Pitch
- Motivering
- Målet
Teori
- förklara HLA
Metod
- förklara programmet (listener trådar, hur kommunikationen flödar genom programmet)
- förklara arkitektren som användes när simulatorn testades.
Resultat
Slutsats, diskussion
Framtida arbete


det är ett program som är en del av en distribuerad simulation, programmet i sig utför grafsökningar efter den kortaste vägen.

* OPPONERING
lathund för opponenter

* INTRO
Hej jag heter Lukas och jag ska presentera mitt exjobb som jag har döpt till "Simulator för Multihop Routing med High Level Architecture". 

* TEORI
Vi kan börja med att gå igenom teorin, förklara vad titeln betyder, vad exjobbet handlar om. 

** Multihop Routing
Är en teknik som radioapparater använder sig utav för att expandera deras räckvidd i ett nätverk. 

I figuren så har vi några cirklar och några pilar. Cirklarna representerar en radioapparat, och pilarna representerar en förbindelse mellan två radioapparater över vilken en viss typ av kommunikation kan skickas.

Vi kan se att radioapparat A vill kommunicera med radioapparat C, men  signalen kommer inte fram för att det är ett berg i vägen här men det behöver inte vara ett berg som är problemet utan det kan ju vara att avståndet är för långt eller något sådant istället.

Radioapparat B har en förbindelse med både A och C, och då kan alltså radioapparat A skicka sin information till B som i sin tur skickar den vidare till C.

Jag kommer att kalla cirklarna (som står för radioapparater) för noder, och pilarna (som står för förbindelser) för bågar, enligt grafteoretiska termer. Den här figuren visar alltså en graf, och grafen består av de förbindelser i nätverket som kan traverseras av kommunikationen som ska skickas.

I det här exjobbet så kommer det att finnas olika typer av kommunikation som kan skickas.

Så den subtila skillnaden mellan graf och nätverk är att nätverket består av alla förbindelser, oavsett hur dåliga de är, grafen består endast av de förbindelser som är av tillräcklig kvalité för att användas.

** Simulator
Ordet simulator betyder i sammanhanget helt enkelt att det handlar om något typ av program som ska beräkna vilka radioapparater i nätverket som har möjlighet att kommunicera med varandra, och i sådana fall hur de ska kommunicera med varandra.

Om vi alltså har någon typ av tabell som beskriver hur bra förbindelserna i nätverket är, och vi vet vilket värde som motsvarar en tillräckligt bra förbindelse, så bör vi kunna ta reda på vilka noder som kan kommunicera.

** High Level Architecture
High Level Architecture, förkortat HLA, är en metod som kan användas för distribuerade simuleringar. Distribuerade simuleringar är många små simuleringar som kopplas ihop till en stor simulering. I figuren så kan vi se en distribuerad simulering där tre simuleringar, kallade federater, som potentiellt körs på helt olika datorer, har kopplat upp sig till en servicebuss som kallas Runtime Infrastructure, eller RTI, för att kunna kommunicera med varandra. Hela strukturen kallas för en federation.

Om vi till exempel vill simulera vädret så kan ett federat simulera vinden och hur den rör sig, ett federat kan simulera moln (var de finns och hur stora de är), och ett tredje federat kan simulera solen och hur den skiner. 

Om då det federatet är vinden så kanske den plötsligt börjar få en västlig vindriktning, den informationen skickas via RTI:n till molnen, som då rör sig väster ut, och de i sin tur skickar sin position till solen som då vet att okej nu ska jag inte lysa på göteborg längre för molnen ligger i vägen.

Det finns en liten sak i federationen som kallas för FOM (Federation Object Module) och detta definierar formatet som informationen skickas på. För att vinden till exemepel ska skicka sin vindrikting till molnen så måste molnen veta vilka fält i paketet som betyder vad i paketet som skickas. Därför så måste de enas om ett format på informationen. Formatet specificeras i FOM:en.
** Pitch
Pitch heter företaget som jag har exjobbat på och Pitch har använt HLA för att göra ett sorts taktikspel åt militären. Militärer sitter då framför varsin dator och styr en av de här blåa fyrkanterna som ni ser på bilden. 

Varje blå fyrkant på bilden är ett federat och kan representera en stridsvagn, ett flygplan eller en soldat osv. Om en soldat vill skicka sin position till en stridsvagen, så måste vi ta reda på om denna kommunikation är möjlig. Alltså: ska de kunna överhuvudtaget se varandra på deras kartor? 

Tidigare har inte multihop routing varit möjlig i radioapparater, men det här spelet som Pitch har gjort kan fortfarande inte simulera multihop routing. Det betyder att även om militären har radioapparater som stödjer multihop routing, och även om två radioapparater bör kunna kommunicera med varandra över nätverket, så kan det hända att simuleringen säger att det inte är möjligt.

* FRÅGESTÄLLNINGAR
** Ska routingalgoritmen vara centraliserad eller distribuerad?
Alltså: om ett federat vill veta den kortaste vägen från nod A till nod B, ska den då räkna ut den kortaste vägen själv, eller bör vi utveckla ett separat federat för att räkna ut den kortaste vägen åt noderna?
** Är simulatorn tillräckligt snabb för en uttömmande sökning?
Ska den centraliserade routingalgoritmen räkna ut alla vägar till och från alla noder (200 noder), eller ska den arbeta på förfrågning?

Tillräckligt snabb: så snabb att den hinner räkna ut förfrågningarna snabbare än den får nya. Om jag vill veta den kortaste vägen från nod A till B varje sekund, och algoritmen tar mer än en sekund på sig så kommer ju kön att bli större och större.

Kan vi tråda den och hur mycket påverkar det?
** Vilken sökalgoritm bör användas?
För att få fram den kortaste vägen mellan två noder?
Kan vi även få vägen mellan två noder som har bäst förbindelsekvalité?

--
Vi vet att det handlar om en A* sökning, men vilken heuristik?

* METOD-IDÉ
** centraliserad routingalgoritm
Jag valde att implementera en centraliserad routingalgoritm. Den är inte särskilt skalbar, men det visade sig nästan krävas en centraliserad routingalgoritm eftersom federaterna inte hade stöd för att beräkna sina egna vägar och då hade även det behövts stöd för att i varje federat ta in en nätverksbeskrivning för att veta hur radionätverket ser ut och så vidare. Thomas gjorde klart för mig tidigt att Pitch ville ha en centraliserad routingalgoritm.  
** stöd för både uttömmande sökning och request response
** A* sökning med två heuristiker

* METOD-EXCECUTION
** skapa ett federat
När vi har klart för oss en övergripande idé över hur programmet ska beté sig så kan vi skapa federatet.

** koda program
* RESULTAT
* SLUTSATS
