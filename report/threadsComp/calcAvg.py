#!/usr/bin/env python3

import statistics

'''
Testing how many threads is optimal. 
Time was taken from before threads start to right before we disconnect from _hlaWorld.

"the lists contain the total time (ms) it took N threads to calculate 39800 x 100 paths, the average time is ..."

- threads: 1 .. 
- Radio l=0.002
- MAX_HOPS=4
- 39800 requests
- 200 noder
- distance heur
- randomized radioCom (but same resulting graph)
'''

results = [
    #1
    [447, 396, 449, 472, 374, 354, 385, 402, 392, 383, 414, 450, 454, 407, 414, 397, 404, 457, 408, 327, 422, 366, 395, 386, 331, 421, 381, 387, 409, 387, 416, 384, 400, 430, 428, 408, 468, 447, 369, 352, 326, 352, 363, 395, 345, 323, 440, 417, 381, 372, 453, 356, 358, 358, 314, 375, 365, 339, 358, 380, 442, 400, 355, 340, 348, 354, 415, 407, 435, 332, 375, 333, 429, 395, 450, 349, 357, 392, 335, 318, 364, 343, 398, 374, 439, 347, 400, 445, 385, 374, 408, 336, 366, 402, 351, 399, 398, 371, 336, 351],
    #2
    [322, 317, 362, 411, 378, 342, 325, 384, 302, 341, 370, 380, 372, 293, 352, 337, 351, 308, 438, 366, 354, 423, 427, 407, 383, 415, 351, 324, 453, 359, 408, 410, 425, 353, 346, 382, 408, 340, 345, 315, 332, 300, 410, 423, 395, 378, 377, 386, 410, 364, 407, 341, 388, 350, 352, 350, 402, 406, 469, 368, 351, 415, 384, 424, 393, 453, 451, 356, 346, 393, 336, 405, 428, 488, 402, 392, 426, 365, 381, 349, 384, 331, 382, 324, 367, 323, 375, 341, 326, 342, 323, 331, 323, 395, 396, 328, 353, 381, 368, 392],
    #3
    [257, 376, 293, 266, 282, 296, 302, 288, 328, 268, 280, 292, 332, 301, 289, 283, 282, 251, 259, 343, 337, 394, 317, 278, 291, 290, 296, 282, 267, 285, 293, 261, 315, 303, 300, 286, 324, 324, 303, 322, 284, 373, 342, 356, 330, 335, 286, 302, 329, 286, 314, 288, 281, 294, 279, 281, 333, 342, 412, 357, 294, 295, 284, 307, 280, 288, 331, 435, 342, 362, 302, 377, 374, 337, 399, 366, 324, 310, 426, 300, 351, 394, 333, 315, 428, 332, 344, 362, 330, 331, 301, 325, 383, 318, 320, 295, 260, 307, 242, 273],
    #4
    [254, 261, 270, 265, 277, 273, 263, 267, 239, 252, 256, 252, 285, 242, 285, 302, 280, 252, 282, 259, 263, 271, 258, 286, 248, 256, 252, 252, 253, 280, 239, 241, 275, 235, 242, 256, 233, 234, 258, 255, 285, 293, 282, 260, 266, 272, 267, 259, 261, 253, 260, 274, 256, 252, 244, 274, 279, 282, 264, 243, 251, 254, 263, 294, 263, 250, 269, 269, 259, 289, 274, 269, 233, 239, 236, 345, 265, 266, 268, 270, 247, 253, 258, 255, 292, 247, 246, 271, 286, 254, 265, 273, 233, 273, 262, 290, 254, 265, 283, 265],
    #5
    [270, 266, 279, 268, 256, 295, 263, 276, 305, 246, 275, 267, 254, 265, 290, 271, 261, 271, 280, 270, 301, 280, 288, 262, 298, 242, 275, 274, 259, 285, 299, 277, 270, 274, 268, 297, 274, 275, 270, 270, 302, 270, 265, 271, 272, 269, 277, 318, 293, 280, 274, 275, 289, 271, 256, 290, 246, 322, 253, 312, 282, 256, 277, 271, 262, 279, 261, 273, 265, 284, 310, 298, 244, 277, 270, 252, 281, 299, 277, 262, 277, 291, 294, 284, 324, 290, 304, 266, 255, 273, 288, 272, 272, 321, 276, 278, 254, 272, 272, 263],
    #6
    [249, 288, 282, 246, 248, 240, 245, 248, 296, 264, 280, 272, 243, 324, 249, 270, 268, 267, 283, 258, 293, 255, 266, 280, 301, 239, 273, 287, 301, 296, 313, 283, 261, 294, 259, 248, 284, 244, 325, 287, 292, 266, 263, 270, 282, 280, 325, 260, 248, 302, 295, 255, 269, 262, 270, 306, 241, 261, 302, 281, 267, 261, 256, 261, 300, 272, 276, 268, 273, 269, 277, 339, 274, 273, 268, 276, 255, 264, 267, 288, 272, 295, 290, 272, 265, 277, 289, 371, 299, 235, 251, 322, 257, 323, 294, 277, 263, 303, 245, 299],
    #7
    [282, 256, 293, 234, 246, 275, 283, 296, 239, 285, 271, 258, 262, 302, 291, 274, 264, 235, 255, 276, 278, 270, 276, 297, 266, 262, 263, 277, 293, 250, 277, 297, 260, 272, 276, 272, 264, 245, 288, 280, 296, 251, 257, 307, 267, 304, 274, 270, 303, 270, 282, 259, 261, 295, 280, 263, 260, 265, 258, 266, 258, 254, 289, 270, 274, 285, 269, 297, 268, 234, 257, 289, 293, 266, 238, 245, 246, 267, 252, 245, 248, 283, 273, 265, 249, 274, 284, 275, 292, 279, 312, 263, 257, 282, 268, 253, 286, 265, 266, 288],
    #8
    [265, 308, 278, 241, 259, 286, 278, 299, 252, 290, 250, 247, 236, 274, 276, 259, 286, 266, 287, 292, 271, 263, 270, 254, 268, 284, 263, 248, 274, 274, 290, 264, 248, 259, 243, 270, 290, 269, 284, 344, 266, 299, 287, 271, 269, 295, 238, 259, 266, 250, 287, 269, 281, 262, 273, 272, 281, 304, 290, 284, 303, 254, 295, 270, 264, 264, 252, 276, 247, 261, 290, 266, 267, 270, 267, 286, 292, 271, 258, 284, 291, 274, 255, 253, 264, 297, 265, 272, 265, 240, 275, 258, 262, 272, 284, 261, 289, 294, 286, 280],
    #9
    [315, 289, 297, 281, 281, 262, 292, 254, 281, 249, 310, 283, 281, 299, 285, 295, 262, 267, 289, 305, 279, 242, 263, 264, 272, 294, 258, 274, 289, 261, 287, 274, 275, 266, 253, 275, 254, 265, 284, 250, 313, 301, 321, 298, 250, 296, 279, 270, 258, 233, 278, 258, 270, 268, 245, 261, 267, 237, 268, 275, 268, 322, 286, 298, 346, 279, 267, 292, 265, 300, 310, 274, 278, 350, 330, 304, 329, 232, 270, 267, 291, 314, 270, 297, 271, 306, 271, 279, 293, 256, 271, 264, 233, 239, 244, 263, 267, 254, 272, 276],
    #10
    [287, 263, 243, 283, 234, 261, 267, 290, 301, 269, 251, 300, 239, 316, 259, 270, 264, 272, 293, 290, 281, 298, 270, 251, 265, 303, 259, 261, 240, 311, 285, 288, 297, 292, 285, 254, 249, 275, 277, 270, 260, 301, 283, 231, 303, 290, 267, 246, 245, 308, 274, 257, 296, 275, 261, 246, 300, 274, 280, 279, 289, 286, 293, 273, 283, 264, 297, 274, 297, 265, 316, 253, 286, 300, 259, 287, 259, 305, 307, 277, 256, 279, 289, 246, 247, 308, 263, 307, 271, 294, 304, 260, 295, 303, 275, 315, 281, 301, 307, 262]
]

results2 = [
[270, 266, 279, 268, 256, 295, 263, 276, 305, 246, 275, 267, 254, 265, 290, 271, 261, 271, 280, 270, 301, 280, 288, 262, 298, 242, 275, 274, 259, 285, 299, 277, 270, 274, 268, 297, 274, 275, 270, 270, 302, 270, 265, 271, 272, 269, 277, 318, 293, 280, 274, 275, 289, 271, 256, 290, 246, 322, 253, 312, 282, 256, 277, 271, 262, 279, 261, 273, 265, 284, 310, 298, 244, 277, 270, 252, 281, 299, 277, 262, 277, 291, 294, 284, 324, 290, 304, 266, 255, 273, 288, 272, 272, 321, 276, 278, 254, 272, 272, 263]
]

k = 1
for n in results:
    min_time = 1000;
    total_time = 0
    for time in n:
        total_time += time
        if (time < min_time):
            min_time = time
    print(k, total_time / len(n), statistics.stdev(n), "min,", min_time)
    k = k + 1

    
